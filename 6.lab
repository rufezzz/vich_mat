2
4 1
1 3
1 2
0 0
1
1



#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

// Скалярное произведение векторов
double dot(const vector<double>& a, const vector<double>& b) {
    double res = 0.0;
    for (size_t i = 0; i < a.size(); ++i)
        res += a[i] * b[i];
    return res;
}

// Умножение матрицы на вектор
vector<double> matVecMult(const vector<vector<double>>& A, const vector<double>& x) {
    size_t n = A.size();
    vector<double> result(n, 0.0);
    for (size_t i = 0; i < n; ++i)
        for (size_t j = 0; j < n; ++j)
            result[i] += A[i][j] * x[j];
    return result;
}

// Разность двух векторов
vector<double> subtract(const vector<double>& a, const vector<double>& b) {
    size_t n = a.size();
    vector<double> res(n);
    for (size_t i = 0; i < n; ++i)
        res[i] = a[i] - b[i];
    return res;
}

// Прибавление alpha * r к x
vector<double> add(const vector<double>& x, const vector<double>& r, double alpha) {
    size_t n = x.size();
    vector<double> res(n);
    for (size_t i = 0; i < n; ++i)
        res[i] = x[i] + alpha * r[i];
    return res;
}

int main() {
    setlocale(LC_CTYPE, "rus");
    ifstream in("matrix.txt");
    if (!in.is_open()) {
        cerr << "Ошибка: не удалось открыть файл matrix.txt\n";
        return 1;
    }

    int n;
    in >> n;

    vector<vector<double>> A(n, vector<double>(n));
    vector<double> b(n), x(n);

    // Ввод матрицы A
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            in >> A[i][j];

    // Ввод вектора b
    for (int i = 0; i < n; ++i)
        in >> b[i];

    // Ввод начального приближения x
    for (int i = 0; i < n; ++i)
        in >> x[i];

    double epsilon;
    int maxIter;
    in >> epsilon >> maxIter;

    in.close();

    vector<double> r(n), Ar(n);
    int iter = 0;

    while (iter < maxIter) {
        vector<double> Ax = matVecMult(A, x);
        r = subtract(b, Ax);
        Ar = matVecMult(A, r);

        double numerator = dot(Ar, r);
        double denominator = dot(Ar, Ar);
        if (denominator == 0.0) {
            cerr << "Ошибка: деление на ноль при вычислении alpha\n";
            break;
        }

        double alpha = numerator / denominator;
        x = add(x, r, alpha);

        double norm_r = sqrt(dot(r, r));
        cout << "Итерация " << iter + 1 << ", ||r|| = " << norm_r << endl;

        if (norm_r < epsilon)
            break;

        ++iter;
    }

    cout << "\nРешение:\n";
    for (double xi : x)
        cout << xi << " ";
    cout << endl;

    return 0;
}
