2
4 1
1 3
1 2
0 0
0.00001
100


#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <iomanip>

using namespace std;

double dot(const vector<double>& a, const vector<double>& b) {
    double result = 0;
    for (size_t i = 0; i < a.size(); ++i)
        result += a[i] * b[i];
    return result;
}

vector<double> matVecMult(const vector<vector<double>>& A, const vector<double>& x) {
    size_t n = A.size();
    vector<double> result(n, 0.0);
    for (size_t i = 0; i < n; ++i)
        for (size_t j = 0; j < n; ++j)
            result[i] += A[i][j] * x[j];
    return result;
}

vector<double> vecAdd(const vector<double>& a, const vector<double>& b, double alpha = 1.0) {
    size_t n = a.size();
    vector<double> result(n);
    for (size_t i = 0; i < n; ++i)
        result[i] = a[i] + alpha * b[i];
    return result;
}

vector<double> vecSub(const vector<double>& a, const vector<double>& b, double alpha = 1.0) {
    size_t n = a.size();
    vector<double> result(n);
    for (size_t i = 0; i < n; ++i)
        result[i] = a[i] - alpha * b[i];
    return result;
}

double norm(const vector<double>& v) {
    return sqrt(dot(v, v));
}

int main() {
    setlocale(LC_CTYPE, "rus");
    ifstream in("matrix.txt");
    if (!in) {
        cerr << "Не удалось открыть matrix.txt" << endl;
        return 1;
    }

    int n;
    in >> n;

    vector<vector<double>> A(n, vector<double>(n));
    vector<double> b(n), x(n);

    // Считывание A
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            in >> A[i][j];

    // Считывание b и начального x
    for (int i = 0; i < n; ++i) in >> b[i];
    for (int i = 0; i < n; ++i) in >> x[i];

    double eps;
    int maxIter;
    in >> eps >> maxIter;
    in.close();

    vector<double> r = vecSub(b, matVecMult(A, x));
    vector<double> p = r;
    double rs_old = dot(r, r);

    for (int i = 0; i < maxIter; ++i) {
        vector<double> Ap = matVecMult(A, p);
        double alpha = rs_old / dot(p, Ap);
        x = vecAdd(x, p, alpha);
        r = vecSub(r, Ap, alpha);

        double rs_new = dot(r, r);
        cout << "Итерация " << i + 1 << ": ||r|| = " << sqrt(rs_new) << endl;

        if (sqrt(rs_new) < eps)
            break;

        double beta = rs_new / rs_old;
        p = vecAdd(r, p, beta);
        rs_old = rs_new;
    }

    cout << "\nРешение:\n";
    cout << fixed << setprecision(6);
    for (double xi : x)
        cout << xi << " ";
    cout << endl;

    return 0;
}
