2
1 2
2 1



#include <iostream>
#include <fstream>              // Для работы с файлами
#include <vector>               // Для использования векторов
#include <cmath>                // Для fabs и других математических функций
#include <iomanip>              // Для форматированного вывода

using namespace std;

const int MAX_ITER = 1000;      // Максимальное количество итераций
const double EPS = 0.0001;        // Допустимая погрешность для сходимости

int main() {

    setlocale(LC_CTYPE, "rus");

    // Открываем файл с матрицей
    ifstream fin("matrix.txt");
    if (!fin) {
        cerr << "Ошибка открытия файла\n";
        return 1;
    }

    int n;                      // Размер матрицы (n x n)
    fin >> n;                   // Считываем размер

    // Чтение матрицы A из файла
    vector<vector<double>> A(n, vector<double>(n));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            fin >> A[i][j];

    // Начальный вектор x (все элементы = 1.0)
    vector<double> x(n, 1.0);

    double lambda_old = 0.0;    // Предыдущее значение собственного числа

    // Начинаем метод степеней
    for (int iter = 0; iter < MAX_ITER; ++iter) {
        vector<double> y(n, 0.0);   // Новый вектор y = A * x

        // Умножение матрицы A на вектор x: y = A * x
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                y[i] += A[i][j] * x[j];

        // Находим норму (максимум по модулю) для приближения λ
        double norm = *max_element(y.begin(), y.end(), [](double a, double b) {
            return fabs(a) < fabs(b);
            });

        // Нормализуем вектор y → x (чтобы избежать переполнения)
        for (int i = 0; i < n; ++i)
            x[i] = y[i] / norm;

        // Проверка на сходимость: если изменение λ очень маленькое, выходим
        if (fabs(norm - lambda_old) < EPS) {
            cout << "Наибольшее по модулю собственное значение: "
                << fixed << setprecision(6) << norm << endl;
            return 0;
        }

        lambda_old = norm; // Обновляем значение λ
    }

    // Если за MAX_ITER итераций не сошлось — выводим сообщение
    cout << "Метод не сошелся за " << MAX_ITER << " итераций\n";
    return 1;
}
