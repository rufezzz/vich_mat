3
4 -2 2
-2 2 -4
2 -4 11
0.00001
100


2
2 1
1 3
0.00001
100



#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <iomanip>

using namespace std;

// Функция находит максимальный по модулю внедиагональный элемент матрицы A
// и возвращает его индексы p и q
int maxOffDiag(const vector<vector<double>>& A, int& p, int& q) {
    int n = A.size();
    double maxVal = 0.0;
    for (int i = 0; i < n; ++i)
        for (int j = i + 1; j < n; ++j)
            if (fabs(A[i][j]) > maxVal) {
                maxVal = fabs(A[i][j]);
                p = i;
                q = j;
            }
    return maxVal;
}

// Основной метод Якоби
void jacobiMethod(vector<vector<double>>& A, double eps, int maxIter) {
    int n = A.size();

    // Матрица собственных векторов (начально - единичная)
    vector<vector<double>> V(n, vector<double>(n, 0.0));
    for (int i = 0; i < n; ++i) V[i][i] = 1.0;

    for (int iter = 0; iter < maxIter; ++iter) {
        int p, q;
        // Ищем максимальный внедиагональный элемент
        if (maxOffDiag(A, p, q) < eps)
            break; // Все элементы вне диагонали малы — завершаем

        // Читаем значения нужных элементов
        double app = A[p][p];
        double aqq = A[q][q];
        double apq = A[p][q];

        // Вычисляем параметры вращения
        double tau = (aqq - app) / (2 * apq);
        double t = (tau >= 0 ? 1.0 : -1.0) / (fabs(tau) + sqrt(1 + tau * tau));
        double c = 1.0 / sqrt(1 + t * t);  // cos(θ)
        double s = c * t;                  // sin(θ)

        // Обновляем элементы матрицы A с учётом вращения
        for (int i = 0; i < n; ++i) {
            if (i != p && i != q) {
                double aip = A[i][p], aiq = A[i][q];
                A[i][p] = A[p][i] = c * aip - s * aiq;
                A[i][q] = A[q][i] = c * aiq + s * aip;
            }
        }

        // Обновляем диагональные элементы
        double appNew = c * c * app - 2 * s * c * apq + s * s * aqq;
        double aqqNew = s * s * app + 2 * s * c * apq + c * c * aqq;
        A[p][p] = appNew;
        A[q][q] = aqqNew;
        A[p][q] = A[q][p] = 0.0; // Обнуляем занятый элемент

        // Обновляем матрицу собственных векторов
        for (int i = 0; i < n; ++i) {
            double vip = V[i][p], viq = V[i][q];
            V[i][p] = c * vip - s * viq;
            V[i][q] = s * vip + c * viq;
        }
    }

    // Вывод собственных значений (на диагонали A)
    cout << "\nСобственные значения:\n";
    for (int i = 0; i < n; ++i)
        cout << fixed << setprecision(6) << A[i][i] << " ";
    cout << "\n";
}

int main() {
    setlocale(LC_CTYPE, "rus");
    ifstream in("matrix.txt");
    if (!in) {
        cerr << "Ошибка при открытии matrix.txt\n";
        return 1;
    }

    int n;
    in >> n;

    // Считываем матрицу A
    vector<vector<double>> A(n, vector<double>(n));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            in >> A[i][j];

    double eps;
    int maxIter;
    in >> eps >> maxIter;
    in.close();

    // Запускаем метод Якоби
    jacobiMethod(A, eps, maxIter);

    return 0;
}
